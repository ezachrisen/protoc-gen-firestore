// Code generated by protoc-gen-firestore. DO NOT EDIT.
// versions:
// source: example.proto

package example

import (
	"cloud.google.com/go/firestore"
	"context"
	"fmt"
	// "github.com/golang/protobuf/ptypes"
	// "google.golang.org/genproto/protobuf/field_mask"
	//  "google.golang.org/api/iterator"
	//	"google.golang.org/grpc/codes"
	"github.com/ezachrisen/gcplog"
	"github.com/golang/protobuf/ptypes/empty"
	"google.golang.org/grpc/status"
)

var (
	// Ensure we have no unused imports
	_ = status.Errorf(status.Code(fmt.Errorf("dummy %s", "dummy")), "dummy")
	_ = gcplog.GrpcStatus
	_ = firestore.Delete
	_ = context.Canceled
	_ = empty.Empty{}
)

type ExampleService struct {
	client     *firestore.Client
	collection string
}

func NewExampleService(c *firestore.Client, collection string) (*ExampleService, error) {
	if c == nil {
		return nil, fmt.Errorf("initializing ExampleService: missing firestore client")
	}

	if collection == "" {
		return nil, fmt.Errorf("initializing ExampleService: missing collection name")

	}

	return &ExampleService{
		client:     c,
		collection: collection,
	}, nil

}

func (s *ExampleService) CreateExample(ctx context.Context, req *Example) (*Example, error) {

	err := CreateExample(ctx, s.c, s.collection, req)
	if err != nil {
		err = status.Errorf(status.Code(err), "CreateExample: error saving Example '%s': %v",
			req.Name, err)
		gcplog.GrpcInfo(ctx, err)
		return nil, err
	}
	return req, nil

}

func (s *ExampleService) GetExample(ctx context.Context, req *ExampleRequest) (*Example, error) {

	doc, err := GetExample(ctx, s.client, s.collection, req.Name)
	if err != nil {
		err = status.Errorf(status.Code(err), "GetExample: '%s': %v", req.Name, err)
		gcplog.GrpcInfo(ctx, err)
		return nil, err
	}
	return doc, nil

}

func (s *ExampleService) DeleteExample(ctx context.Context, req *ExampleDeleteRequest) (*empty.Empty, error) {

	err := DeleteExample(ctx, s.client, s.collection, req.Name)
	if err != nil {
		err = status.Errorf(status.Code(err), "DeleteExample: '%s': %v",
			req.Name, err)
		gcplog.GrpcInfo(ctx, err)
		return nil, err
	}
	return &empty.Empty{}, nil

}

func (s *ExampleService) ListExamples(ctx context.Context, req *ExampleListRequest) (*ExampleList, error) {

	l, err := ListExamples(ctx, s.client, s.collection, req)
	if err != nil {
		err = status.Errorf(status.Code(err), "ListExamples: '%s': %v",
			req.Name, err)
		gcplog.GrpcInfo(ctx, err)
		return nil, err
	}
	return &l, nil

}

func (s *ExampleService) UpdateExample(ctx context.Context, req *ExampleUpdateRequest) (*Example, error) {

	err := UpdateExample(ctx, s.client, s.collection, req)
	if err != nil {
		err = status.Errorf(status.Code(err), "UpdateExample: '%s': %v",
			req.Name, err)
		gcplog.GrpcInfo(ctx, err)
		return nil, err
	}
	return req.Example, nil

}

func (s *ExampleService) SomeOtherMethod(ctx context.Context, req *Example) (*Example, error) {

	return nil, fmt.Errorf("SomeOtherMethod is not implemented")

}
